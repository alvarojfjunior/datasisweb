{"version":3,"sources":["store/reducers/snackbar.js","store/reducers/index.js","store/index.js","pages/NotFound/index.js","components/AppBar/index.js","pages/Adm001/index.js","store/actions/snackbar.js","pages/Emp002/index.js","pages/Cr002/index.js","routes.js","components/SnackBar/index.js","App.js","serviceWorker.js","index.js"],"names":["INITIAL_STATE","visible","style","message","combineReducers","snackbar","state","action","type","store","createStore","rootReducers","NotFound","className","AppBar","history","useHistory","Navbar","expand","Brand","onClick","push","Toggle","aria-controls","Collapse","id","Nav","NavDropdown","title","Item","Col","Image","src","roundedCircle","alignRight","Adm001","setSnackbar","connect","props","useState","usuario","setUsuario","senha","setSenha","value","onChange","e","target","name","preventDefault","dispatch","snackBarActions","Cr002","Routes","exact","path","component","Emp002","setTimeout","height","App","SnackBar","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.e62fd2c7.chunk.js","sourcesContent":["const INITIAL_STATE =  {\r\n    visible: false,\r\n    style: '',\r\n    message: '',\r\n}\r\nexport default function snackbar(state = INITIAL_STATE, action) {\r\n    if (action.type === 'SET_SNACKBAR') {\r\n        return {\r\n            ...state, \r\n            visible: action.visible,\r\n            style: action.style,\r\n            message: action.message,\r\n        }\r\n    }\r\n    return state;\r\n}","  \r\nimport { combineReducers } from 'redux';\r\n\r\nimport snackbar from './snackbar';\r\n\r\nexport default combineReducers ({\r\n    snackbar,\r\n})","import { createStore } from 'redux';\r\n\r\nimport rootReducers from './reducers';\r\n\r\nconst store = createStore(rootReducers);\r\n\r\nexport default store;","import React from 'react';\r\nimport './styles.css';\r\n\r\nfunction NotFound() {\r\n  return (\r\n    <div className=\"container-not-found\">\r\n      <h1>Está rota não existe</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NotFound;\r\n","import React from 'react';\r\nimport { Navbar, NavDropdown, Nav, Col, Image } from 'react-bootstrap';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport './styles.css';\r\n\r\nfunction AppBar() {\r\n  const history = useHistory();\r\n\r\n  return (\r\n    <div className=\"container-app-bar\">\r\n      <Navbar className=\"nav-bar\" expand=\"lg\">\r\n        <Navbar.Brand className=\"titulo\" onClick={() => history.push('adm001')}>Datasis Web</Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Nav>\r\n            <NavDropdown title=\"Cadastro\" id=\"basic-nav-dropdown\">\r\n              <NavDropdown.Item onClick={() => history.push('cr002')}>Cliente</NavDropdown.Item>\r\n              <NavDropdown.Item >Produto</NavDropdown.Item>\r\n            </NavDropdown>\r\n            <NavDropdown title=\"Estoque\" id=\"basic-nav-dropdown\">\r\n              <NavDropdown.Item>Nota de entrada</NavDropdown.Item>\r\n            </NavDropdown>\r\n          </Nav>\r\n          <Navbar.Collapse className=\"justify-content-end\">\r\n            <Nav>\r\n              <Col>\r\n                <Image className=\"avatar\" src=\"https://thispersondoesnotexist.com/image\" roundedCircle />\r\n              </Col>\r\n              <NavDropdown title=\"\" alignRight id=\"dropdown-basic\">\r\n                <NavDropdown.Item onClick={() => history.push('emp002')}>Sair</NavDropdown.Item>\r\n              </NavDropdown>\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AppBar;\r\n","import React from 'react';\r\n\r\nimport './styles.css';\r\nimport AppBar from '../../components/AppBar';\r\n\r\nfunction Adm001() {\r\n  return (\r\n    <div>\r\n      <AppBar />\r\n      <div className=\"container-adm001\">\r\n        <h1> Adm001 </h1>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Adm001;\r\n","export function setSnackbar(visible, style, message) {\r\n    return {\r\n        type: 'SET_SNACKBAR',\r\n        visible,\r\n        style,\r\n        message,\r\n    }\r\n}","import React, {useState} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport './styles.css';\r\nimport * as snackBarActions from '../../store/actions/snackbar';\r\n\r\nfunction Emp002(props) {\r\n  const history = useHistory();\r\n  const [usuario, setUsuario] = useState('');\r\n  const [senha, setSenha] = useState('');\r\n\r\n  function buttonLogin(e) {\r\n    e.preventDefault();\r\n\r\n    if (usuario==='root' &&  senha==='suporte') {\r\n      props.dispatch(snackBarActions.setSnackbar(true, 'succes', 'Bem Vindo!'));\r\n      history.push('adm001');\r\n    }\r\n    else\r\n      props.dispatch(snackBarActions.setSnackbar(true, 'warning', 'Usuário e/ou senha incorreto!'));\r\n      \r\n  }\r\n\r\n  return (\r\n    <div className=\"container-emp002\">\r\n      <h1> EMP002 </h1>\r\n      <form>\r\n        <input\r\n          type=\"text\"\r\n          value={usuario}\r\n          onChange={e => setUsuario(e.target.value)} />\r\n        \r\n        <input \r\n          type=\"password\" \r\n            value={senha}\r\n            onChange={e => setSenha(e.target.value)} />\r\n        \r\n        <select name=\"empresa\">\r\n          <option value=\"volvo\">Volvo</option>\r\n          <option value=\"saab\">Saab</option>\r\n          <option value=\"mercedes\">Mercedes</option>\r\n          <option value=\"audi\">Audi</option>\r\n        </select>\r\n        <button onClick={buttonLogin}> Login </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default connect(state => ({ state }))(Emp002);\r\n","import React from 'react';\r\n\r\nimport './styles.css';\r\nimport AppBar from '../../components/AppBar';\r\n\r\nfunction Cr002() {\r\n  return (\r\n    <div>\r\n      <AppBar />\r\n      <div className=\"container-cr002\">\r\n        <h1> Cr002 </h1>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Cr002;\r\n","import React from 'react';\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\r\n\r\nimport NotFound from './pages/NotFound';\r\nimport Adm001 from './pages/Adm001';\r\nimport Emp002 from './pages/Emp002';\r\nimport Cr002 from './pages/Cr002';\r\n\r\nfunction Routes() {\r\n    return (\r\n        <BrowserRouter>\r\n            <Switch>\r\n                <Route exact path=\"/\" component={Emp002}></Route>\r\n                <Route exact path=\"/emp002\" component={Emp002}></Route>\r\n                <Route exact path=\"/adm001\" component={Adm001}></Route>\r\n                <Route exact path=\"/cr002/\" component={Cr002}></Route>\r\n                <Route path='*' component={NotFound} />\r\n            </Switch>\r\n        </BrowserRouter>\r\n    );\r\n}\r\n\r\nexport default Routes;","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport './styles.css';\r\nimport * as snackBarActions from '../../store/actions/snackbar';\r\n\r\nfunction Snackbar(props) {\r\n  if (props.state.snackbar.visible) {\r\n    setTimeout(() => {\r\n      props.dispatch(snackBarActions.setSnackbar(false));\r\n    }, 3000);\r\n  }\r\n\r\n  function handleCloseSnackBar(e) {\r\n    e.preventDefault();\r\n    props.dispatch(snackBarActions.setSnackbar(false));\r\n  }\r\n\r\n  return (\r\n    <div className=\"snackbar-container\" style={props.state.snackbar.visible ? { height: \"50px\" } : { height: \"0px\" }}>\r\n      <span>{props.state.snackbar.message}</span>\r\n      <button onClick={handleCloseSnackBar}>OK</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default connect(state => ({ state }))(Snackbar);\r\n","import React from 'react';\nimport { Provider } from 'react-redux';\n\nimport store from './store';\nimport Routes from './routes';\nimport SnackBar from './components/SnackBar';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Routes></Routes>\n      <SnackBar></SnackBar>\n    </Provider >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}